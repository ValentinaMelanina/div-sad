!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}(function(t){"use strict";function e(t){if(t instanceof Date)return t;if(String(t).match(n))return String(t).match(/^[0-9]*$/)&&(t=Number(t)),String(t).match(/\-/)&&(t=String(t).replace(/\-/g,"/")),new Date(t);throw new Error("Couldn't cast `"+t+"` to a date object.")}function s(t){var e=t.toString().replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1");return new RegExp(e)}function a(t){return function(e){var a=e.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);if(a)for(var i=0,n=a.length;i<n;++i){var r=a[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),c=s(r[0]),h=r[1]||"",u=r[3]||"",d=null;r=r[2],l.hasOwnProperty(r)&&(d=l[r],d=Number(t[d])),null!==d&&("!"===h&&(d=o(u,d)),""===h&&d<10&&(d="0"+d.toString()),e=e.replace(c,d.toString()))}return e=e.replace(/%%/,"%")}}function o(t,e){var s="s",a="";return t&&(1===(t=t.replace(/(:|;|\s)/gi,"").split(/\,/)).length?s=t[0]:(a=t[0],s=t[1])),Math.abs(e)>1?s:a}var i=[],n=[],r={precision:100,elapse:!1,defer:!1};n.push(/^[0-9]*$/.source),n.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),n.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),n=new RegExp(n.join("|"));var l={Y:"years",m:"months",n:"daysToMonth",d:"daysToWeek",w:"weeks",W:"weeksToMonth",H:"hours",M:"minutes",S:"seconds",D:"totalDays",I:"totalHours",N:"totalMinutes",T:"totalSeconds"},c=function(e,s,a){this.el=e,this.$el=t(e),this.interval=null,this.offset={},this.options=t.extend({},r),this.firstTick=!0,this.instanceNumber=i.length,i.push(this),this.$el.data("countdown-instance",this.instanceNumber),a&&("function"==typeof a?(this.$el.on("update.countdown",a),this.$el.on("stoped.countdown",a),this.$el.on("finish.countdown",a)):this.options=t.extend({},r,a)),this.setFinalDate(s),!1===this.options.defer&&this.start()};t.extend(c.prototype,{start:function(){null!==this.interval&&clearInterval(this.interval);var t=this;this.update(),this.interval=setInterval(function(){t.update.call(t)},this.options.precision)},stop:function(){clearInterval(this.interval),this.interval=null,this.dispatchEvent("stoped")},toggle:function(){this.interval?this.stop():this.start()},pause:function(){this.stop()},resume:function(){this.start()},remove:function(){this.stop.call(this),i[this.instanceNumber]=null,delete this.$el.data().countdownInstance},setFinalDate:function(t){this.finalDate=e(t)},update:function(){if(0!==this.$el.closest("html").length){var t,e=new Date;t=this.finalDate.getTime()-e.getTime(),t=Math.ceil(t/1e3),t=!this.options.elapse&&t<0?0:Math.abs(t),this.totalSecsLeft===t||this.firstTick?this.firstTick=!1:(this.totalSecsLeft=t,this.elapsed=e>=this.finalDate,this.offset={seconds:this.totalSecsLeft%60,minutes:Math.floor(this.totalSecsLeft/60)%60,hours:Math.floor(this.totalSecsLeft/60/60)%24,days:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToWeek:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToMonth:Math.floor(this.totalSecsLeft/60/60/24%30.4368),weeks:Math.floor(this.totalSecsLeft/60/60/24/7),weeksToMonth:Math.floor(this.totalSecsLeft/60/60/24/7)%4,months:Math.floor(this.totalSecsLeft/60/60/24/30.4368),years:Math.abs(this.finalDate.getFullYear()-e.getFullYear()),totalDays:Math.floor(this.totalSecsLeft/60/60/24),totalHours:Math.floor(this.totalSecsLeft/60/60),totalMinutes:Math.floor(this.totalSecsLeft/60),totalSeconds:this.totalSecsLeft},this.options.elapse||0!==this.totalSecsLeft?this.dispatchEvent("update"):(this.stop(),this.dispatchEvent("finish")))}else this.remove()},dispatchEvent:function(e){var s=t.Event(e+".countdown");s.finalDate=this.finalDate,s.elapsed=this.elapsed,s.offset=t.extend({},this.offset),s.strftime=a(this.offset),this.$el.trigger(s)}}),t.fn.countdown=function(){var e=Array.prototype.slice.call(arguments,0);return this.each(function(){var s=t(this).data("countdown-instance");if(void 0!==s){var a=i[s],o=e[0];c.prototype.hasOwnProperty(o)?a[o].apply(a,e.slice(1)):null===String(o).match(/^[$A-Z_][0-9A-Z_$]*$/i)?(a.setFinalDate.call(a,o),a.start()):t.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi,o))}else new c(this,e[0],e[1])})}}),function(t,e,s){function a(e,s){this.element=e,this.$element=t(e),this.tabs=[],this.state="",this.rotateInterval=0,this.$queue=t({}),this.options=t.extend({},o,s),this.init()}var o={active:null,event:"click",disabled:[],collapsible:"accordion",startCollapsed:!1,rotate:!1,setHash:!1,animation:"default",animationQueue:!1,duration:500,fluidHeight:!0,scrollToAccordion:!1,scrollToAccordionOnLoad:!0,scrollToAccordionOffset:0,accordionTabElement:"<div></div>",click:function(){},activate:function(){},deactivate:function(){},load:function(){},activateState:function(){},classes:{stateDefault:"r-tabs-state-default",stateActive:"r-tabs-state-active",stateDisabled:"r-tabs-state-disabled",stateExcluded:"r-tabs-state-excluded",container:"r-tabs",ul:"r-tabs-nav",tab:"r-tabs-tab",anchor:"r-tabs-anchor",panel:"r-tabs-panel",accordionTitle:"r-tabs-accordion-title"}};a.prototype.init=function(){var s=this;this.tabs=this._loadElements(),this._loadClasses(),this._loadEvents(),t(e).on("resize",function(t){s._setState(t),!0!==s.options.fluidHeight&&s._equaliseHeights()}),t(e).on("hashchange",function(t){var a=s._getTabRefBySelector(e.location.hash),o=s._getTab(a);a>=0&&!o._ignoreHashChange&&!o.disabled&&s._openTab(t,s._getTab(a),!0)}),!1!==this.options.rotate&&this.startRotation(),!0!==this.options.fluidHeight&&s._equaliseHeights(),this.$element.bind("tabs-click",function(t,e){s.options.click.call(this,t,e)}),this.$element.bind("tabs-activate",function(t,e){s.options.activate.call(this,t,e)}),this.$element.bind("tabs-deactivate",function(t,e){s.options.deactivate.call(this,t,e)}),this.$element.bind("tabs-activate-state",function(t,e){s.options.activateState.call(this,t,e)}),this.$element.bind("tabs-load",function(t){var e;s._setState(t),!0===s.options.startCollapsed||"accordion"===s.options.startCollapsed&&"accordion"===s.state||(e=s._getStartTab(),s._openTab(t,e),s.options.load.call(this,t,e))}),this.$element.trigger("tabs-load")},a.prototype._loadElements=function(){var e=this,s=this.$element.children("ul:first"),a=[],o=0;return this.$element.addClass(e.options.classes.container),s.addClass(e.options.classes.ul),t("li",s).each(function(){var s,i,n,r,l,c=t(this);if(!c.hasClass(e.options.classes.stateExcluded)){l=(s=t("a",c)).attr("href"),i=t(l),n=t(e.options.accordionTabElement).insertBefore(i),r=t("<a></a>").attr("href",l).html(s.html()).appendTo(n);var h={_ignoreHashChange:!1,id:o,disabled:-1!==t.inArray(o,e.options.disabled),tab:t(this),anchor:t("a",c),panel:i,selector:l,accordionTab:n,accordionAnchor:r,active:!1};o++,a.push(h)}}),a},a.prototype._loadClasses=function(){for(var t=0;t<this.tabs.length;t++)this.tabs[t].tab.addClass(this.options.classes.stateDefault).addClass(this.options.classes.tab),this.tabs[t].anchor.addClass(this.options.classes.anchor),this.tabs[t].panel.addClass(this.options.classes.stateDefault).addClass(this.options.classes.panel),this.tabs[t].accordionTab.addClass(this.options.classes.accordionTitle),this.tabs[t].accordionAnchor.addClass(this.options.classes.anchor),this.tabs[t].disabled&&(this.tabs[t].tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),this.tabs[t].accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},a.prototype._loadEvents=function(){for(var t=this,s=function(s){var a=t._getCurrentTab(),o=s.data.tab;s.preventDefault(),o.tab.trigger("tabs-click",o),o.disabled||(t.options.setHash&&(history.pushState?(e.location.origin||(e.location.origin=e.location.protocol+"//"+e.location.hostname+(e.location.port?":"+e.location.port:"")),history.pushState(null,null,e.location.origin+e.location.pathname+e.location.search+o.selector)):e.location.hash=o.selector),s.data.tab._ignoreHashChange=!0,(a!==o||t._isCollapisble())&&(t._closeTab(s,a),a===o&&t._isCollapisble()||t._openTab(s,o,!1,!0)))},a=0;a<this.tabs.length;a++)this.tabs[a].anchor.on(t.options.event,{tab:t.tabs[a]},s),this.tabs[a].accordionAnchor.on(t.options.event,{tab:t.tabs[a]},s)},a.prototype._getStartTab=function(){var t=this._getTabRefBySelector(e.location.hash);return t>=0&&!this._getTab(t).disabled?this._getTab(t):this.options.active>0&&!this._getTab(this.options.active).disabled?this._getTab(this.options.active):this._getTab(0)},a.prototype._setState=function(e){var s,a=t("ul:first",this.$element),o=this.state,i="string"==typeof this.options.startCollapsed;a.is(":visible")?this.state="tabs":this.state="accordion",this.state!==o&&(this.$element.trigger("tabs-activate-state",{oldState:o,newState:this.state}),o&&i&&this.options.startCollapsed!==this.state&&void 0===this._getCurrentTab()&&(s=this._getStartTab(e),this._openTab(e,s)))},a.prototype._openTab=function(e,s,a,o){var i,n=this;a&&this._closeTab(e,this._getCurrentTab()),o&&this.rotateInterval>0&&this.stopRotation(),s.active=!0,s.tab.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),s.accordionTab.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),n._doTransition(s.panel,n.options.animation,"open",function(){var a="tabs-load"!==e.type||n.options.scrollToAccordionOnLoad;s.panel.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),"accordion"!==n.getState()||!n.options.scrollToAccordion||n._isInView(s.accordionTab)&&"default"===n.options.animation||!a||(i=s.accordionTab.offset().top-n.options.scrollToAccordionOffset,"default"!==n.options.animation&&n.options.duration>0?t("html, body").animate({scrollTop:i},n.options.duration):t("html, body").scrollTop(i))}),this.$element.trigger("tabs-activate",s)},a.prototype._closeTab=function(t,e){var s,a=this,o="string"==typeof a.options.animationQueue;void 0!==e&&(s=!(!o||a.getState()!==a.options.animationQueue)||!o&&a.options.animationQueue,e.active=!1,e.tab.removeClass(a.options.classes.stateActive).addClass(a.options.classes.stateDefault),a._doTransition(e.panel,a.options.animation,"close",function(){e.accordionTab.removeClass(a.options.classes.stateActive).addClass(a.options.classes.stateDefault),e.panel.removeClass(a.options.classes.stateActive).addClass(a.options.classes.stateDefault)},!s),this.$element.trigger("tabs-deactivate",e))},a.prototype._doTransition=function(t,e,s,a,o){var i,n=this;switch(e){case"slide":i="open"===s?"slideDown":"slideUp";break;case"fade":i="open"===s?"fadeIn":"fadeOut";break;default:i="open"===s?"show":"hide",n.options.duration=0}this.$queue.queue("responsive-tabs",function(o){t[i]({duration:n.options.duration,complete:function(){a.call(t,e,s),o()}})}),("open"===s||o)&&this.$queue.dequeue("responsive-tabs")},a.prototype._isCollapisble=function(){return"boolean"==typeof this.options.collapsible&&this.options.collapsible||"string"==typeof this.options.collapsible&&this.options.collapsible===this.getState()},a.prototype._getTab=function(t){return this.tabs[t]},a.prototype._getTabRefBySelector=function(t){for(var e=0;e<this.tabs.length;e++)if(this.tabs[e].selector===t)return e;return-1},a.prototype._getCurrentTab=function(){return this._getTab(this._getCurrentTabRef())},a.prototype._getNextTabRef=function(t){var e=t||this._getCurrentTabRef(),s=e===this.tabs.length-1?0:e+1;return this._getTab(s).disabled?this._getNextTabRef(s):s},a.prototype._getPreviousTabRef=function(){return 0===this._getCurrentTabRef()?this.tabs.length-1:this._getCurrentTabRef()-1},a.prototype._getCurrentTabRef=function(){for(var t=0;t<this.tabs.length;t++)if(this.tabs[t].active)return t;return-1},a.prototype._equaliseHeights=function(){var e=0;t.each(t.map(this.tabs,function(t){return e=Math.max(e,t.panel.css("minHeight","").height()),t.panel}),function(){this.css("minHeight",e)})},a.prototype._isInView=function(s){var a=t(e).scrollTop(),o=a+t(e).height(),i=s.offset().top;return i+s.height()<=o&&i>=a},a.prototype.activate=function(t,e){var s=jQuery.Event("tabs-activate"),a=this._getTab(t);a.disabled||this._openTab(s,a,!0,e||!0)},a.prototype.deactivate=function(t){var e=jQuery.Event("tabs-dectivate"),s=this._getTab(t);s.disabled||this._closeTab(e,s)},a.prototype.enable=function(t){var e=this._getTab(t);e&&(e.disabled=!1,e.tab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled),e.accordionTab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled))},a.prototype.disable=function(t){var e=this._getTab(t);e&&(e.disabled=!0,e.tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),e.accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},a.prototype.getState=function(){return this.state},a.prototype.startRotation=function(e){var s=this;if(!(this.tabs.length>this.options.disabled.length))throw new Error("Rotation is not possible if all tabs are disabled");this.rotateInterval=setInterval(function(){var t=jQuery.Event("rotate");s._openTab(t,s._getTab(s._getNextTabRef()),!0)},e||(t.isNumeric(s.options.rotate)?s.options.rotate:4e3))},a.prototype.stopRotation=function(){e.clearInterval(this.rotateInterval),this.rotateInterval=0},a.prototype.option=function(t,e){return e&&(this.options[t]=e),this.options[t]},t.fn.responsiveTabs=function(e){var s,o=arguments;return void 0===e||"object"==typeof e?this.each(function(){t.data(this,"responsivetabs")||t.data(this,"responsivetabs",new a(this,e))}):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(s=t.data(this[0],"responsivetabs"),"destroy"===e&&t.data(this,"responsivetabs",null),s instanceof a&&"function"==typeof s[e]?s[e].apply(s,Array.prototype.slice.call(o,1)):this):void 0}}(jQuery,window),function(t){"use strict";function e(t){return null!==t&&t===t.window}function s(t){return e(t)?t:9===t.nodeType&&t.defaultView}function a(t){var e,a,o={top:0,left:0},i=t&&t.ownerDocument;return e=i.documentElement,void 0!==t.getBoundingClientRect&&(o=t.getBoundingClientRect()),a=s(i),{top:o.top+a.pageYOffset-e.clientTop,left:o.left+a.pageXOffset-e.clientLeft}}function o(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e+=s+":"+t[s]+";");return e}function i(t){if(!1===h.allowEvent(t))return null;for(var e=null,s=t.target||t.srcElement;null!==s.parentNode;){if(!(s instanceof SVGElement)&&-1!==s.className.indexOf("waves-effect")){e=s;break}s=s.parentNode}return e}function n(e){var s=i(e);null!==s&&(c.show(e,s),"ontouchstart"in t&&(s.addEventListener("touchend",c.hide,!1),s.addEventListener("touchcancel",c.hide,!1)),s.addEventListener("mouseup",c.hide,!1),s.addEventListener("mouseleave",c.hide,!1),s.addEventListener("dragend",c.hide,!1))}var r=r||{},l=document.querySelectorAll.bind(document),c={duration:750,show:function(t,e){if(2===t.button)return!1;var s=e||this,i=document.createElement("div");i.className="waves-ripple",s.appendChild(i);var n=a(s),r=t.pageY-n.top,l=t.pageX-n.left,h="scale("+s.clientWidth/100*10+")";"touches"in t&&(r=t.touches[0].pageY-n.top,l=t.touches[0].pageX-n.left),i.setAttribute("data-hold",Date.now()),i.setAttribute("data-scale",h),i.setAttribute("data-x",l),i.setAttribute("data-y",r);var u={top:r+"px",left:l+"px"};i.className=i.className+" waves-notransition",i.setAttribute("style",o(u)),i.className=i.className.replace("waves-notransition",""),u["-webkit-transform"]=h,u["-moz-transform"]=h,u["-ms-transform"]=h,u["-o-transform"]=h,u.transform=h,u.opacity="1",u["-webkit-transition-duration"]=c.duration+"ms",u["-moz-transition-duration"]=c.duration+"ms",u["-o-transition-duration"]=c.duration+"ms",u["transition-duration"]=c.duration+"ms",u["-webkit-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["-moz-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["-o-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",i.setAttribute("style",o(u))},hide:function(t){h.touchup(t);var e=this,s=(e.clientWidth,null),a=e.getElementsByClassName("waves-ripple");if(!(a.length>0))return!1;var i=(s=a[a.length-1]).getAttribute("data-x"),n=s.getAttribute("data-y"),r=s.getAttribute("data-scale"),l=350-(Date.now()-Number(s.getAttribute("data-hold")));l<0&&(l=0),setTimeout(function(){var t={top:n+"px",left:i+"px",opacity:"0","-webkit-transition-duration":c.duration+"ms","-moz-transition-duration":c.duration+"ms","-o-transition-duration":c.duration+"ms","transition-duration":c.duration+"ms","-webkit-transform":r,"-moz-transform":r,"-ms-transform":r,"-o-transform":r,transform:r};s.setAttribute("style",o(t)),setTimeout(function(){try{e.removeChild(s)}catch(t){return!1}},c.duration)},l)},wrapInput:function(t){for(var e=0;e<t.length;e++){var s=t[e];if("input"===s.tagName.toLowerCase()){var a=s.parentNode;if("i"===a.tagName.toLowerCase()&&-1!==a.className.indexOf("waves-effect"))continue;var o=document.createElement("i");o.className=s.className+" waves-input-wrapper";var i=s.getAttribute("style");i||(i=""),o.setAttribute("style",i),s.className="waves-button-input",s.removeAttribute("style"),a.replaceChild(o,s),o.appendChild(s)}}}},h={touches:0,allowEvent:function(t){var e=!0;return"touchstart"===t.type?h.touches+=1:"touchend"===t.type||"touchcancel"===t.type?setTimeout(function(){h.touches>0&&(h.touches-=1)},500):"mousedown"===t.type&&h.touches>0&&(e=!1),e},touchup:function(t){h.allowEvent(t)}};r.displayEffect=function(e){"duration"in(e=e||{})&&(c.duration=e.duration),c.wrapInput(l(".waves-effect")),"ontouchstart"in t&&document.body.addEventListener("touchstart",n,!1),document.body.addEventListener("mousedown",n,!1)},r.attach=function(e){"input"===e.tagName.toLowerCase()&&(c.wrapInput([e]),e=e.parentNode),"ontouchstart"in t&&e.addEventListener("touchstart",n,!1),e.addEventListener("mousedown",n,!1)},t.Waves=r,document.addEventListener("DOMContentLoaded",function(){r.displayEffect()},!1)}(window),$(document).ready(function(){var t=document.querySelector(".main-menu"),e=document.querySelector(".header__top-bar"),s=document.querySelectorAll(".hamburger");s.length>0&&function(t,e,s){if("[object Object]"===Object.prototype.toString.call(t))for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.call(s,t[a],a,t);else for(var o=0,i=t.length;i>o;o++)e.call(s,t[o],o,t)}(s,function(s){s.addEventListener("click",function(){this.classList.toggle("is-active"),t.classList.toggle("active"),e.classList.toggle("active")},!1)}),$(".timetable").responsiveTabs({collapsible:!0,startCollapsed:!1,active:0}),$(".event__counter").countdown($(".event__counter").attr("data-start-date"),function(t){function e(t,e){var s=[2,0,1,1,1,2];return t[e%100>4&&e%100<20?2:s[e%10<5?e%10:5]]}var s=t.offset.weeks,a=t.offset.days,o=t.offset.hours,i=t.offset.minutes,n=e(["Неделя","Недели","Недель"],s),r=e(["День","Дня","Дней"],a),l=e(["Час","Часа","Часов"],o),c=e(["Минута","Минуты","Минут"],i);$(this).html(t.strftime("<span>"+s+n+"</span> <span>"+a+r+"</span> <span>"+o+l+"</span> <span>"+i+c+"</span> "))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
