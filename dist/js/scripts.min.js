!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}(function(t){"use strict";function e(t){if(t instanceof Date)return t;if(String(t).match(i))return String(t).match(/^[0-9]*$/)&&(t=Number(t)),String(t).match(/\-/)&&(t=String(t).replace(/\-/g,"/")),new Date(t);throw new Error("Couldn't cast `"+t+"` to a date object.")}function s(t){var e=t.toString().replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1");return new RegExp(e)}function n(t){return function(e){var n=e.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);if(n)for(var o=0,i=n.length;o<i;++o){var r=n[o].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),c=s(r[0]),u=r[1]||"",d=r[3]||"",h=null;r=r[2],l.hasOwnProperty(r)&&(h=l[r],h=Number(t[h])),null!==h&&("!"===u&&(h=a(d,h)),""===u&&h<10&&(h="0"+h.toString()),e=e.replace(c,h.toString()))}return e=e.replace(/%%/,"%")}}function a(t,e){var s="s",n="";return t&&(1===(t=t.replace(/(:|;|\s)/gi,"").split(/\,/)).length?s=t[0]:(n=t[0],s=t[1])),Math.abs(e)>1?s:n}var o=[],i=[],r={precision:100,elapse:!1,defer:!1};i.push(/^[0-9]*$/.source),i.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),i.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),i=new RegExp(i.join("|"));var l={Y:"years",m:"months",n:"daysToMonth",d:"daysToWeek",w:"weeks",W:"weeksToMonth",H:"hours",M:"minutes",S:"seconds",D:"totalDays",I:"totalHours",N:"totalMinutes",T:"totalSeconds"},c=function(e,s,n){this.el=e,this.$el=t(e),this.interval=null,this.offset={},this.options=t.extend({},r),this.firstTick=!0,this.instanceNumber=o.length,o.push(this),this.$el.data("countdown-instance",this.instanceNumber),n&&("function"==typeof n?(this.$el.on("update.countdown",n),this.$el.on("stoped.countdown",n),this.$el.on("finish.countdown",n)):this.options=t.extend({},r,n)),this.setFinalDate(s),!1===this.options.defer&&this.start()};t.extend(c.prototype,{start:function(){null!==this.interval&&clearInterval(this.interval);var t=this;this.update(),this.interval=setInterval(function(){t.update.call(t)},this.options.precision)},stop:function(){clearInterval(this.interval),this.interval=null,this.dispatchEvent("stoped")},toggle:function(){this.interval?this.stop():this.start()},pause:function(){this.stop()},resume:function(){this.start()},remove:function(){this.stop.call(this),o[this.instanceNumber]=null,delete this.$el.data().countdownInstance},setFinalDate:function(t){this.finalDate=e(t)},update:function(){if(0!==this.$el.closest("html").length){var t,e=new Date;t=this.finalDate.getTime()-e.getTime(),t=Math.ceil(t/1e3),t=!this.options.elapse&&t<0?0:Math.abs(t),this.totalSecsLeft===t||this.firstTick?this.firstTick=!1:(this.totalSecsLeft=t,this.elapsed=e>=this.finalDate,this.offset={seconds:this.totalSecsLeft%60,minutes:Math.floor(this.totalSecsLeft/60)%60,hours:Math.floor(this.totalSecsLeft/60/60)%24,days:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToWeek:Math.floor(this.totalSecsLeft/60/60/24)%7,daysToMonth:Math.floor(this.totalSecsLeft/60/60/24%30.4368),weeks:Math.floor(this.totalSecsLeft/60/60/24/7),weeksToMonth:Math.floor(this.totalSecsLeft/60/60/24/7)%4,months:Math.floor(this.totalSecsLeft/60/60/24/30.4368),years:Math.abs(this.finalDate.getFullYear()-e.getFullYear()),totalDays:Math.floor(this.totalSecsLeft/60/60/24),totalHours:Math.floor(this.totalSecsLeft/60/60),totalMinutes:Math.floor(this.totalSecsLeft/60),totalSeconds:this.totalSecsLeft},this.options.elapse||0!==this.totalSecsLeft?this.dispatchEvent("update"):(this.stop(),this.dispatchEvent("finish")))}else this.remove()},dispatchEvent:function(e){var s=t.Event(e+".countdown");s.finalDate=this.finalDate,s.elapsed=this.elapsed,s.offset=t.extend({},this.offset),s.strftime=n(this.offset),this.$el.trigger(s)}}),t.fn.countdown=function(){var e=Array.prototype.slice.call(arguments,0);return this.each(function(){var s=t(this).data("countdown-instance");if(void 0!==s){var n=o[s],a=e[0];c.prototype.hasOwnProperty(a)?n[a].apply(n,e.slice(1)):null===String(a).match(/^[$A-Z_][0-9A-Z_$]*$/i)?(n.setFinalDate.call(n,a),n.start()):t.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi,a))}else new c(this,e[0],e[1])})}}),function(t,e,s){function n(t,e){return typeof t===e}function a(t){var e=_.className,s=g._config.classPrefix||"";if(w&&(e=e.baseVal),g._config.enableJSClass){var n=new RegExp("(^|\\s)"+s+"no-js(\\s|$)");e=e.replace(n,"$1"+s+"js$2")}g._config.enableClasses&&(e+=" "+s+t.join(" "+s),w?_.className.baseVal=e:_.className=e)}function o(t,e){if("object"==typeof t)for(var s in t)T(t,s)&&o(s,t[s]);else{var n=(t=t.toLowerCase()).split("."),i=g[n[0]];if(2==n.length&&(i=i[n[1]]),void 0!==i)return g;e="function"==typeof e?e():e,1==n.length?g[n[0]]=e:(!g[n[0]]||g[n[0]]instanceof Boolean||(g[n[0]]=new Boolean(g[n[0]])),g[n[0]][n[1]]=e),a([(e&&0!=e?"":"no-")+n.join("-")]),g._trigger(t,e)}return g}function i(){return"function"!=typeof e.createElement?e.createElement(arguments[0]):w?e.createElementNS.call(e,"http://www.w3.org/2000/svg",arguments[0]):e.createElement.apply(e,arguments)}function r(t,e){return!!~(""+t).indexOf(e)}function l(t){return t.replace(/([a-z])-([a-z])/g,function(t,e,s){return e+s.toUpperCase()}).replace(/^-/,"")}function c(t){return t.replace(/([A-Z])/g,function(t,e){return"-"+e.toLowerCase()}).replace(/^ms-/,"-ms-")}function u(e,s,n){var a;if("getComputedStyle"in t){a=getComputedStyle.call(t,e,s);var o=t.console;null!==a?n&&(a=a.getPropertyValue(n)):o&&o[o.error?"error":"log"].call(o,"getComputedStyle returning null, its possible modernizr test results are inaccurate")}else a=!s&&e.currentStyle&&e.currentStyle[n];return a}function d(){var t=e.body;return t||(t=i(w?"svg":"body"),t.fake=!0),t}function h(t,s,n,a){var o,r,l,c,u="modernizr",h=i("div"),p=d();if(parseInt(n,10))for(;n--;)l=i("div"),l.id=a?a[n]:u+(n+1),h.appendChild(l);return o=i("style"),o.type="text/css",o.id="s"+u,(p.fake?p:h).appendChild(o),p.appendChild(h),o.styleSheet?o.styleSheet.cssText=t:o.appendChild(e.createTextNode(t)),h.id=u,p.fake&&(p.style.background="",p.style.overflow="hidden",c=_.style.overflow,_.style.overflow="hidden",_.appendChild(p)),r=s(h,t),p.fake?(p.parentNode.removeChild(p),_.style.overflow=c,_.offsetHeight):h.parentNode.removeChild(h),!!r}function p(e,n){var a=e.length;if("CSS"in t&&"supports"in t.CSS){for(;a--;)if(t.CSS.supports(c(e[a]),n))return!0;return!1}if("CSSSupportsRule"in t){for(var o=[];a--;)o.push("("+c(e[a])+":"+n+")");return o=o.join(" or "),h("@supports ("+o+") { #modernizr { position: absolute; } }",function(t){return"absolute"==u(t,null,"position")})}return s}function f(t,e,a,o){function c(){d&&(delete S.style,delete S.modElem)}if(o=!n(o,"undefined")&&o,!n(a,"undefined")){var u=p(t,a);if(!n(u,"undefined"))return u}for(var d,h,f,v,m,b=["modernizr","tspan","samp"];!S.style&&b.length;)d=!0,S.modElem=i(b.shift()),S.style=S.modElem.style;for(f=t.length,h=0;f>h;h++)if(v=t[h],m=S.style[v],r(v,"-")&&(v=l(v)),S.style[v]!==s){if(o||n(a,"undefined"))return c(),"pfx"!=e||v;try{S.style[v]=a}catch(t){}if(S.style[v]!=m)return c(),"pfx"!=e||v}return c(),!1}var v=[],m=[],b={_version:"3.5.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(t,e){var s=this;setTimeout(function(){e(s[t])},0)},addTest:function(t,e,s){m.push({name:t,fn:e,options:s})},addAsyncTest:function(t){m.push({name:null,fn:t})}},g=function(){};g.prototype=b,g=new g;var y=b._config.usePrefixes?" -webkit- -moz- -o- -ms- ".split(" "):["",""];b._prefixes=y;var _=e.documentElement,w="svg"===_.nodeName.toLowerCase();w||function(t,e){function s(t,e){var s=t.createElement("p"),n=t.getElementsByTagName("head")[0]||t.documentElement;return s.innerHTML="x<style>"+e+"</style>",n.insertBefore(s.lastChild,n.firstChild)}function n(){var t=m.elements;return"string"==typeof t?t.split(" "):t}function a(t){var e=v[t[p]];return e||(e={},f++,t[p]=f,v[f]=e),e}function o(t,s,n){if(s||(s=e),c)return s.createElement(t);n||(n=a(s));var o;return!(o=n.cache[t]?n.cache[t].cloneNode():h.test(t)?(n.cache[t]=n.createElem(t)).cloneNode():n.createElem(t)).canHaveChildren||d.test(t)||o.tagUrn?o:n.frag.appendChild(o)}function i(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(s){return m.shivMethods?o(s,t,e):e.createElem(s)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+n().join().replace(/[\w\-:]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(m,e.frag)}function r(t){t||(t=e);var n=a(t);return!m.shivCSS||l||n.hasCSS||(n.hasCSS=!!s(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),c||i(t,n),t}var l,c,u=t.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,h=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,p="_html5shiv",f=0,v={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",l="hidden"in t,c=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return void 0===t.cloneNode||void 0===t.createDocumentFragment||void 0===t.createElement}()}catch(t){l=!0,c=!0}}();var m={elements:u.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",version:"3.7.3",shivCSS:!1!==u.shivCSS,supportsUnknownElements:c,shivMethods:!1!==u.shivMethods,type:"default",shivDocument:r,createElement:o,createDocumentFragment:function(t,s){if(t||(t=e),c)return t.createDocumentFragment();for(var o=(s=s||a(t)).frag.cloneNode(),i=0,r=n(),l=r.length;l>i;i++)o.createElement(r[i]);return o},addElements:function(t,e){var s=m.elements;"string"!=typeof s&&(s=s.join(" ")),"string"!=typeof t&&(t=t.join(" ")),m.elements=s+" "+t,r(e)}};t.html5=m,r(e),"object"==typeof module&&module.exports&&(module.exports=m)}(void 0!==t?t:this,e);var T;!function(){var t={}.hasOwnProperty;T=n(t,"undefined")||n(t.call,"undefined")?function(t,e){return e in t&&n(t.constructor.prototype[e],"undefined")}:function(e,s){return t.call(e,s)}}(),b._l={},b.on=function(t,e){this._l[t]||(this._l[t]=[]),this._l[t].push(e),g.hasOwnProperty(t)&&setTimeout(function(){g._trigger(t,g[t])},0)},b._trigger=function(t,e){if(this._l[t]){var s=this._l[t];setTimeout(function(){var t;for(t=0;t<s.length;t++)(0,s[t])(e)},0),delete this._l[t]}},g._q.push(function(){b.addTest=o}),g.addTest("csscalc",function(){var t="width:",e=i("a");return e.style.cssText=t+y.join("calc(10px);"+t),!!e.style.length});var C={elem:i("modernizr")};g._q.push(function(){delete C.elem});var S={style:C.elem.style};g._q.unshift(function(){delete S.style}),b.testProp=function(t,e,n){return f([t],s,e,n)},function(){var t,e,s,a,o,i,r;for(var l in m)if(m.hasOwnProperty(l)){if(t=[],(e=m[l]).name&&(t.push(e.name.toLowerCase()),e.options&&e.options.aliases&&e.options.aliases.length))for(s=0;s<e.options.aliases.length;s++)t.push(e.options.aliases[s].toLowerCase());for(a=n(e.fn,"function")?e.fn():e.fn,o=0;o<t.length;o++)i=t[o],1===(r=i.split(".")).length?g[r[0]]=a:(!g[r[0]]||g[r[0]]instanceof Boolean||(g[r[0]]=new Boolean(g[r[0]])),g[r[0]][r[1]]=a),v.push((a?"":"no-")+r.join("-"))}}(),a(v),delete b.addTest,delete b.addAsyncTest;for(var E=0;E<g._q.length;E++)g._q[E]();t.Modernizr=g}(window,document),function(t){var e={init:function(e){var s={parent:t(window),position:"absolute",veticalAlign:"middle",align:"center"};return e&&t.extend(s,e),this.each(function(){var e;e="absolute"==s.position||"fixed"==s.position?s.position:"absolute";var n=t("<div>").addClass("fullsizeWrap").css({left:"0",top:"0",width:"100%",height:"100%",overflow:"hidden",position:e}),a=t(this).css({position:"absolute",maxWidth:"none",minWidth:0,maxHeight:"none",minHeight:0}).wrap(n),o=a.closest(s.parent).addClass("coverParent");t.isWindow(s.parent[0])&&(o=t(window));var i=a.clone().removeAttr("class").removeAttr("width").removeAttr("height").css({left:"-9999px",top:"-9999px"}).appendTo("body"),r=i.width(),l=i.height(),c=o.width(),u=o.height(),d=r/l,h=c/u,p=function(){if(d<h){var t=c/d,e=(t-u)/2;a.css({width:c,height:t,top:-e,left:"0"})}else{var n=u*d,o=(n-c)/2;a.css({height:u,width:n,left:-o,top:"0"})}"top"==s.veticalAlign&&a.css({top:0,bottom:"auto"}),"bottom"==s.veticalAlign&&a.css({top:"auto",bottom:"0"}),"left"==s.align&&a.css({right:"auto",left:"0"}),"right"==s.align&&a.css({left:"auto",right:"0"})};i.remove(),p(),a.fadeTo(500,1),t(window).on("resize redraw",function(){c=o.width(),u=o.height(),h=c/u,p()})})}};t.fn.liCover=function(s){return e[s]?e[s].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof s&&s?void t.error("Метод "+s+" в jQuery.liCover не существует"):e.init.apply(this,arguments)}}(jQuery),function(t,e,s){function n(e,s){this.element=e,this.$element=t(e),this.tabs=[],this.state="",this.rotateInterval=0,this.$queue=t({}),this.options=t.extend({},a,s),this.init()}var a={active:null,event:"click",disabled:[],collapsible:"accordion",startCollapsed:!1,rotate:!1,setHash:!1,animation:"default",animationQueue:!1,duration:500,fluidHeight:!0,scrollToAccordion:!1,scrollToAccordionOnLoad:!0,scrollToAccordionOffset:0,accordionTabElement:"<div></div>",click:function(){},activate:function(){},deactivate:function(){},load:function(){},activateState:function(){},classes:{stateDefault:"r-tabs-state-default",stateActive:"r-tabs-state-active",stateDisabled:"r-tabs-state-disabled",stateExcluded:"r-tabs-state-excluded",container:"r-tabs",ul:"r-tabs-nav",tab:"r-tabs-tab",anchor:"r-tabs-anchor",panel:"r-tabs-panel",accordionTitle:"r-tabs-accordion-title"}};n.prototype.init=function(){var s=this;this.tabs=this._loadElements(),this._loadClasses(),this._loadEvents(),t(e).on("resize",function(t){s._setState(t),!0!==s.options.fluidHeight&&s._equaliseHeights()}),t(e).on("hashchange",function(t){var n=s._getTabRefBySelector(e.location.hash),a=s._getTab(n);n>=0&&!a._ignoreHashChange&&!a.disabled&&s._openTab(t,s._getTab(n),!0)}),!1!==this.options.rotate&&this.startRotation(),!0!==this.options.fluidHeight&&s._equaliseHeights(),this.$element.bind("tabs-click",function(t,e){s.options.click.call(this,t,e)}),this.$element.bind("tabs-activate",function(t,e){s.options.activate.call(this,t,e)}),this.$element.bind("tabs-deactivate",function(t,e){s.options.deactivate.call(this,t,e)}),this.$element.bind("tabs-activate-state",function(t,e){s.options.activateState.call(this,t,e)}),this.$element.bind("tabs-load",function(t){var e;s._setState(t),!0===s.options.startCollapsed||"accordion"===s.options.startCollapsed&&"accordion"===s.state||(e=s._getStartTab(),s._openTab(t,e),s.options.load.call(this,t,e))}),this.$element.trigger("tabs-load")},n.prototype._loadElements=function(){var e=this,s=this.$element.children("ul:first"),n=[],a=0;return this.$element.addClass(e.options.classes.container),s.addClass(e.options.classes.ul),t("li",s).each(function(){var s,o,i,r,l,c=t(this);if(!c.hasClass(e.options.classes.stateExcluded)){l=(s=t("a",c)).attr("href"),o=t(l),i=t(e.options.accordionTabElement).insertBefore(o),r=t("<a></a>").attr("href",l).html(s.html()).appendTo(i);var u={_ignoreHashChange:!1,id:a,disabled:-1!==t.inArray(a,e.options.disabled),tab:t(this),anchor:t("a",c),panel:o,selector:l,accordionTab:i,accordionAnchor:r,active:!1};a++,n.push(u)}}),n},n.prototype._loadClasses=function(){for(var t=0;t<this.tabs.length;t++)this.tabs[t].tab.addClass(this.options.classes.stateDefault).addClass(this.options.classes.tab),this.tabs[t].anchor.addClass(this.options.classes.anchor),this.tabs[t].panel.addClass(this.options.classes.stateDefault).addClass(this.options.classes.panel),this.tabs[t].accordionTab.addClass(this.options.classes.accordionTitle),this.tabs[t].accordionAnchor.addClass(this.options.classes.anchor),this.tabs[t].disabled&&(this.tabs[t].tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),this.tabs[t].accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},n.prototype._loadEvents=function(){for(var t=this,s=function(s){var n=t._getCurrentTab(),a=s.data.tab;s.preventDefault(),a.tab.trigger("tabs-click",a),a.disabled||(t.options.setHash&&(history.pushState?(e.location.origin||(e.location.origin=e.location.protocol+"//"+e.location.hostname+(e.location.port?":"+e.location.port:"")),history.pushState(null,null,e.location.origin+e.location.pathname+e.location.search+a.selector)):e.location.hash=a.selector),s.data.tab._ignoreHashChange=!0,(n!==a||t._isCollapisble())&&(t._closeTab(s,n),n===a&&t._isCollapisble()||t._openTab(s,a,!1,!0)))},n=0;n<this.tabs.length;n++)this.tabs[n].anchor.on(t.options.event,{tab:t.tabs[n]},s),this.tabs[n].accordionAnchor.on(t.options.event,{tab:t.tabs[n]},s)},n.prototype._getStartTab=function(){var t=this._getTabRefBySelector(e.location.hash);return t>=0&&!this._getTab(t).disabled?this._getTab(t):this.options.active>0&&!this._getTab(this.options.active).disabled?this._getTab(this.options.active):this._getTab(0)},n.prototype._setState=function(e){var s,n=t("ul:first",this.$element),a=this.state,o="string"==typeof this.options.startCollapsed;n.is(":visible")?this.state="tabs":this.state="accordion",this.state!==a&&(this.$element.trigger("tabs-activate-state",{oldState:a,newState:this.state}),a&&o&&this.options.startCollapsed!==this.state&&void 0===this._getCurrentTab()&&(s=this._getStartTab(e),this._openTab(e,s)))},n.prototype._openTab=function(e,s,n,a){var o,i=this;n&&this._closeTab(e,this._getCurrentTab()),a&&this.rotateInterval>0&&this.stopRotation(),s.active=!0,s.tab.removeClass(i.options.classes.stateDefault).addClass(i.options.classes.stateActive),s.accordionTab.removeClass(i.options.classes.stateDefault).addClass(i.options.classes.stateActive),i._doTransition(s.panel,i.options.animation,"open",function(){var n="tabs-load"!==e.type||i.options.scrollToAccordionOnLoad;s.panel.removeClass(i.options.classes.stateDefault).addClass(i.options.classes.stateActive),"accordion"!==i.getState()||!i.options.scrollToAccordion||i._isInView(s.accordionTab)&&"default"===i.options.animation||!n||(o=s.accordionTab.offset().top-i.options.scrollToAccordionOffset,"default"!==i.options.animation&&i.options.duration>0?t("html, body").animate({scrollTop:o},i.options.duration):t("html, body").scrollTop(o))}),this.$element.trigger("tabs-activate",s)},n.prototype._closeTab=function(t,e){var s,n=this,a="string"==typeof n.options.animationQueue;void 0!==e&&(s=!(!a||n.getState()!==n.options.animationQueue)||!a&&n.options.animationQueue,e.active=!1,e.tab.removeClass(n.options.classes.stateActive).addClass(n.options.classes.stateDefault),n._doTransition(e.panel,n.options.animation,"close",function(){e.accordionTab.removeClass(n.options.classes.stateActive).addClass(n.options.classes.stateDefault),e.panel.removeClass(n.options.classes.stateActive).addClass(n.options.classes.stateDefault)},!s),this.$element.trigger("tabs-deactivate",e))},n.prototype._doTransition=function(t,e,s,n,a){var o,i=this;switch(e){case"slide":o="open"===s?"slideDown":"slideUp";break;case"fade":o="open"===s?"fadeIn":"fadeOut";break;default:o="open"===s?"show":"hide",i.options.duration=0}this.$queue.queue("responsive-tabs",function(a){t[o]({duration:i.options.duration,complete:function(){n.call(t,e,s),a()}})}),("open"===s||a)&&this.$queue.dequeue("responsive-tabs")},n.prototype._isCollapisble=function(){return"boolean"==typeof this.options.collapsible&&this.options.collapsible||"string"==typeof this.options.collapsible&&this.options.collapsible===this.getState()},n.prototype._getTab=function(t){return this.tabs[t]},n.prototype._getTabRefBySelector=function(t){for(var e=0;e<this.tabs.length;e++)if(this.tabs[e].selector===t)return e;return-1},n.prototype._getCurrentTab=function(){return this._getTab(this._getCurrentTabRef())},n.prototype._getNextTabRef=function(t){var e=t||this._getCurrentTabRef(),s=e===this.tabs.length-1?0:e+1;return this._getTab(s).disabled?this._getNextTabRef(s):s},n.prototype._getPreviousTabRef=function(){return 0===this._getCurrentTabRef()?this.tabs.length-1:this._getCurrentTabRef()-1},n.prototype._getCurrentTabRef=function(){for(var t=0;t<this.tabs.length;t++)if(this.tabs[t].active)return t;return-1},n.prototype._equaliseHeights=function(){var e=0;t.each(t.map(this.tabs,function(t){return e=Math.max(e,t.panel.css("minHeight","").height()),t.panel}),function(){this.css("minHeight",e)})},n.prototype._isInView=function(s){var n=t(e).scrollTop(),a=n+t(e).height(),o=s.offset().top;return o+s.height()<=a&&o>=n},n.prototype.activate=function(t,e){var s=jQuery.Event("tabs-activate"),n=this._getTab(t);n.disabled||this._openTab(s,n,!0,e||!0)},n.prototype.deactivate=function(t){var e=jQuery.Event("tabs-dectivate"),s=this._getTab(t);s.disabled||this._closeTab(e,s)},n.prototype.enable=function(t){var e=this._getTab(t);e&&(e.disabled=!1,e.tab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled),e.accordionTab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled))},n.prototype.disable=function(t){var e=this._getTab(t);e&&(e.disabled=!0,e.tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),e.accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},n.prototype.getState=function(){return this.state},n.prototype.startRotation=function(e){var s=this;if(!(this.tabs.length>this.options.disabled.length))throw new Error("Rotation is not possible if all tabs are disabled");this.rotateInterval=setInterval(function(){var t=jQuery.Event("rotate");s._openTab(t,s._getTab(s._getNextTabRef()),!0)},e||(t.isNumeric(s.options.rotate)?s.options.rotate:4e3))},n.prototype.stopRotation=function(){e.clearInterval(this.rotateInterval),this.rotateInterval=0},n.prototype.option=function(t,e){return e&&(this.options[t]=e),this.options[t]},t.fn.responsiveTabs=function(e){var s,a=arguments;return void 0===e||"object"==typeof e?this.each(function(){t.data(this,"responsivetabs")||t.data(this,"responsivetabs",new n(this,e))}):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(s=t.data(this[0],"responsivetabs"),"destroy"===e&&t.data(this,"responsivetabs",null),s instanceof n&&"function"==typeof s[e]?s[e].apply(s,Array.prototype.slice.call(a,1)):this):void 0}}(jQuery,window),function(t){"use strict";function e(t){return null!==t&&t===t.window}function s(t){return e(t)?t:9===t.nodeType&&t.defaultView}function n(t){var e,n,a={top:0,left:0},o=t&&t.ownerDocument;return e=o.documentElement,void 0!==t.getBoundingClientRect&&(a=t.getBoundingClientRect()),n=s(o),{top:a.top+n.pageYOffset-e.clientTop,left:a.left+n.pageXOffset-e.clientLeft}}function a(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e+=s+":"+t[s]+";");return e}function o(t){if(!1===u.allowEvent(t))return null;for(var e=null,s=t.target||t.srcElement;null!==s.parentNode;){if(!(s instanceof SVGElement)&&-1!==s.className.indexOf("waves-effect")){e=s;break}s=s.parentNode}return e}function i(e){var s=o(e);null!==s&&(c.show(e,s),"ontouchstart"in t&&(s.addEventListener("touchend",c.hide,!1),s.addEventListener("touchcancel",c.hide,!1)),s.addEventListener("mouseup",c.hide,!1),s.addEventListener("mouseleave",c.hide,!1),s.addEventListener("dragend",c.hide,!1))}var r=r||{},l=document.querySelectorAll.bind(document),c={duration:750,show:function(t,e){if(2===t.button)return!1;var s=e||this,o=document.createElement("div");o.className="waves-ripple",s.appendChild(o);var i=n(s),r=t.pageY-i.top,l=t.pageX-i.left,u="scale("+s.clientWidth/100*10+")";"touches"in t&&(r=t.touches[0].pageY-i.top,l=t.touches[0].pageX-i.left),o.setAttribute("data-hold",Date.now()),o.setAttribute("data-scale",u),o.setAttribute("data-x",l),o.setAttribute("data-y",r);var d={top:r+"px",left:l+"px"};o.className=o.className+" waves-notransition",o.setAttribute("style",a(d)),o.className=o.className.replace("waves-notransition",""),d["-webkit-transform"]=u,d["-moz-transform"]=u,d["-ms-transform"]=u,d["-o-transform"]=u,d.transform=u,d.opacity="1",d["-webkit-transition-duration"]=c.duration+"ms",d["-moz-transition-duration"]=c.duration+"ms",d["-o-transition-duration"]=c.duration+"ms",d["transition-duration"]=c.duration+"ms",d["-webkit-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",d["-moz-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",d["-o-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",d["transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",o.setAttribute("style",a(d))},hide:function(t){u.touchup(t);var e=this,s=(e.clientWidth,null),n=e.getElementsByClassName("waves-ripple");if(!(n.length>0))return!1;var o=(s=n[n.length-1]).getAttribute("data-x"),i=s.getAttribute("data-y"),r=s.getAttribute("data-scale"),l=350-(Date.now()-Number(s.getAttribute("data-hold")));l<0&&(l=0),setTimeout(function(){var t={top:i+"px",left:o+"px",opacity:"0","-webkit-transition-duration":c.duration+"ms","-moz-transition-duration":c.duration+"ms","-o-transition-duration":c.duration+"ms","transition-duration":c.duration+"ms","-webkit-transform":r,"-moz-transform":r,"-ms-transform":r,"-o-transform":r,transform:r};s.setAttribute("style",a(t)),setTimeout(function(){try{e.removeChild(s)}catch(t){return!1}},c.duration)},l)},wrapInput:function(t){for(var e=0;e<t.length;e++){var s=t[e];if("input"===s.tagName.toLowerCase()){var n=s.parentNode;if("i"===n.tagName.toLowerCase()&&-1!==n.className.indexOf("waves-effect"))continue;var a=document.createElement("i");a.className=s.className+" waves-input-wrapper";var o=s.getAttribute("style");o||(o=""),a.setAttribute("style",o),s.className="waves-button-input",s.removeAttribute("style"),n.replaceChild(a,s),a.appendChild(s)}}}},u={touches:0,allowEvent:function(t){var e=!0;return"touchstart"===t.type?u.touches+=1:"touchend"===t.type||"touchcancel"===t.type?setTimeout(function(){u.touches>0&&(u.touches-=1)},500):"mousedown"===t.type&&u.touches>0&&(e=!1),e},touchup:function(t){u.allowEvent(t)}};r.displayEffect=function(e){"duration"in(e=e||{})&&(c.duration=e.duration),c.wrapInput(l(".waves-effect")),"ontouchstart"in t&&document.body.addEventListener("touchstart",i,!1),document.body.addEventListener("mousedown",i,!1)},r.attach=function(e){"input"===e.tagName.toLowerCase()&&(c.wrapInput([e]),e=e.parentNode),"ontouchstart"in t&&e.addEventListener("touchstart",i,!1),e.addEventListener("mousedown",i,!1)},t.Waves=r,document.addEventListener("DOMContentLoaded",function(){r.displayEffect()},!1)}(window),$(document).ready(function(){var t=document.querySelector(".main-menu"),e=document.querySelector(".header__top-bar"),s=document.querySelectorAll(".hamburger-main-menu");s.length>0&&function(t,e,s){if("[object Object]"===Object.prototype.toString.call(t))for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.call(s,t[n],n,t);else for(var a=0,o=t.length;o>a;a++)e.call(s,t[a],a,t)}(s,function(s){s.addEventListener("click",function(){this.classList.toggle("is-active"),t.classList.toggle("active"),e.classList.toggle("active")},!1)}),$(".timetable").responsiveTabs({collapsible:!0,startCollapsed:!1,active:0}),$(".event__counter").countdown($(".event__counter").attr("data-start-date"),function(t){function e(t,e){var s=[2,0,1,1,1,2];return t[e%100>4&&e%100<20?2:s[e%10<5?e%10:5]]}var s=t.offset.weeks,n=t.offset.days,a=t.offset.hours,o=t.offset.minutes,i=e(["Неделя","Недели","Недель"],s),r=e(["День","Дня","Дней"],n),l=e(["Час","Часа","Часов"],a),c=e(["Минута","Минуты","Минут"],o);$(this).html(t.strftime('<div class="event__counter-wrap"><div class="event__counter-number">'+s+'</div> <div class="event__counter-text">'+i+'</div> </div> <div class="event__counter-wrap"><div class="event__counter-number">'+n+'</div> <div class="event__counter-text">'+r+'</div> </div> <div class="event__counter-wrap"><div class="event__counter-number">'+a+'</div> <div class="event__counter-text">'+l+'</div> </div> <div class="event__counter-wrap"><div class="event__counter-number">'+o+'</div> <div class="event__counter-text">'+c+"</div> </div> "))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
