!function(t,e,a){function s(e,a){this.element=e,this.$element=t(e),this.tabs=[],this.state="",this.rotateInterval=0,this.$queue=t({}),this.options=t.extend({},o,a),this.init()}var o={active:null,event:"click",disabled:[],collapsible:"accordion",startCollapsed:!1,rotate:!1,setHash:!1,animation:"default",animationQueue:!1,duration:500,fluidHeight:!0,scrollToAccordion:!1,scrollToAccordionOnLoad:!0,scrollToAccordionOffset:0,accordionTabElement:"<div></div>",click:function(){},activate:function(){},deactivate:function(){},load:function(){},activateState:function(){},classes:{stateDefault:"r-tabs-state-default",stateActive:"r-tabs-state-active",stateDisabled:"r-tabs-state-disabled",stateExcluded:"r-tabs-state-excluded",container:"r-tabs",ul:"r-tabs-nav",tab:"r-tabs-tab",anchor:"r-tabs-anchor",panel:"r-tabs-panel",accordionTitle:"r-tabs-accordion-title"}};s.prototype.init=function(){var a=this;this.tabs=this._loadElements(),this._loadClasses(),this._loadEvents(),t(e).on("resize",function(t){a._setState(t),!0!==a.options.fluidHeight&&a._equaliseHeights()}),t(e).on("hashchange",function(t){var s=a._getTabRefBySelector(e.location.hash),o=a._getTab(s);s>=0&&!o._ignoreHashChange&&!o.disabled&&a._openTab(t,a._getTab(s),!0)}),!1!==this.options.rotate&&this.startRotation(),!0!==this.options.fluidHeight&&a._equaliseHeights(),this.$element.bind("tabs-click",function(t,e){a.options.click.call(this,t,e)}),this.$element.bind("tabs-activate",function(t,e){a.options.activate.call(this,t,e)}),this.$element.bind("tabs-deactivate",function(t,e){a.options.deactivate.call(this,t,e)}),this.$element.bind("tabs-activate-state",function(t,e){a.options.activateState.call(this,t,e)}),this.$element.bind("tabs-load",function(t){var e;a._setState(t),!0===a.options.startCollapsed||"accordion"===a.options.startCollapsed&&"accordion"===a.state||(e=a._getStartTab(),a._openTab(t,e),a.options.load.call(this,t,e))}),this.$element.trigger("tabs-load")},s.prototype._loadElements=function(){var e=this,a=this.$element.children("ul:first"),s=[],o=0;return this.$element.addClass(e.options.classes.container),a.addClass(e.options.classes.ul),t("li",a).each(function(){var a,i,n,r,l,c=t(this);if(!c.hasClass(e.options.classes.stateExcluded)){l=(a=t("a",c)).attr("href"),i=t(l),n=t(e.options.accordionTabElement).insertBefore(i),r=t("<a></a>").attr("href",l).html(a.html()).appendTo(n);var d={_ignoreHashChange:!1,id:o,disabled:-1!==t.inArray(o,e.options.disabled),tab:t(this),anchor:t("a",c),panel:i,selector:l,accordionTab:n,accordionAnchor:r,active:!1};o++,s.push(d)}}),s},s.prototype._loadClasses=function(){for(var t=0;t<this.tabs.length;t++)this.tabs[t].tab.addClass(this.options.classes.stateDefault).addClass(this.options.classes.tab),this.tabs[t].anchor.addClass(this.options.classes.anchor),this.tabs[t].panel.addClass(this.options.classes.stateDefault).addClass(this.options.classes.panel),this.tabs[t].accordionTab.addClass(this.options.classes.accordionTitle),this.tabs[t].accordionAnchor.addClass(this.options.classes.anchor),this.tabs[t].disabled&&(this.tabs[t].tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),this.tabs[t].accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},s.prototype._loadEvents=function(){for(var t=this,a=function(a){var s=t._getCurrentTab(),o=a.data.tab;a.preventDefault(),o.tab.trigger("tabs-click",o),o.disabled||(t.options.setHash&&(history.pushState?(e.location.origin||(e.location.origin=e.location.protocol+"//"+e.location.hostname+(e.location.port?":"+e.location.port:"")),history.pushState(null,null,e.location.origin+e.location.pathname+e.location.search+o.selector)):e.location.hash=o.selector),a.data.tab._ignoreHashChange=!0,(s!==o||t._isCollapisble())&&(t._closeTab(a,s),s===o&&t._isCollapisble()||t._openTab(a,o,!1,!0)))},s=0;s<this.tabs.length;s++)this.tabs[s].anchor.on(t.options.event,{tab:t.tabs[s]},a),this.tabs[s].accordionAnchor.on(t.options.event,{tab:t.tabs[s]},a)},s.prototype._getStartTab=function(){var t=this._getTabRefBySelector(e.location.hash);return t>=0&&!this._getTab(t).disabled?this._getTab(t):this.options.active>0&&!this._getTab(this.options.active).disabled?this._getTab(this.options.active):this._getTab(0)},s.prototype._setState=function(e){var a,s=t("ul:first",this.$element),o=this.state,i="string"==typeof this.options.startCollapsed;s.is(":visible")?this.state="tabs":this.state="accordion",this.state!==o&&(this.$element.trigger("tabs-activate-state",{oldState:o,newState:this.state}),o&&i&&this.options.startCollapsed!==this.state&&void 0===this._getCurrentTab()&&(a=this._getStartTab(e),this._openTab(e,a)))},s.prototype._openTab=function(e,a,s,o){var i,n=this;s&&this._closeTab(e,this._getCurrentTab()),o&&this.rotateInterval>0&&this.stopRotation(),a.active=!0,a.tab.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),a.accordionTab.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),n._doTransition(a.panel,n.options.animation,"open",function(){var s="tabs-load"!==e.type||n.options.scrollToAccordionOnLoad;a.panel.removeClass(n.options.classes.stateDefault).addClass(n.options.classes.stateActive),"accordion"!==n.getState()||!n.options.scrollToAccordion||n._isInView(a.accordionTab)&&"default"===n.options.animation||!s||(i=a.accordionTab.offset().top-n.options.scrollToAccordionOffset,"default"!==n.options.animation&&n.options.duration>0?t("html, body").animate({scrollTop:i},n.options.duration):t("html, body").scrollTop(i))}),this.$element.trigger("tabs-activate",a)},s.prototype._closeTab=function(t,e){var a,s=this,o="string"==typeof s.options.animationQueue;void 0!==e&&(a=!(!o||s.getState()!==s.options.animationQueue)||!o&&s.options.animationQueue,e.active=!1,e.tab.removeClass(s.options.classes.stateActive).addClass(s.options.classes.stateDefault),s._doTransition(e.panel,s.options.animation,"close",function(){e.accordionTab.removeClass(s.options.classes.stateActive).addClass(s.options.classes.stateDefault),e.panel.removeClass(s.options.classes.stateActive).addClass(s.options.classes.stateDefault)},!a),this.$element.trigger("tabs-deactivate",e))},s.prototype._doTransition=function(t,e,a,s,o){var i,n=this;switch(e){case"slide":i="open"===a?"slideDown":"slideUp";break;case"fade":i="open"===a?"fadeIn":"fadeOut";break;default:i="open"===a?"show":"hide",n.options.duration=0}this.$queue.queue("responsive-tabs",function(o){t[i]({duration:n.options.duration,complete:function(){s.call(t,e,a),o()}})}),("open"===a||o)&&this.$queue.dequeue("responsive-tabs")},s.prototype._isCollapisble=function(){return"boolean"==typeof this.options.collapsible&&this.options.collapsible||"string"==typeof this.options.collapsible&&this.options.collapsible===this.getState()},s.prototype._getTab=function(t){return this.tabs[t]},s.prototype._getTabRefBySelector=function(t){for(var e=0;e<this.tabs.length;e++)if(this.tabs[e].selector===t)return e;return-1},s.prototype._getCurrentTab=function(){return this._getTab(this._getCurrentTabRef())},s.prototype._getNextTabRef=function(t){var e=t||this._getCurrentTabRef(),a=e===this.tabs.length-1?0:e+1;return this._getTab(a).disabled?this._getNextTabRef(a):a},s.prototype._getPreviousTabRef=function(){return 0===this._getCurrentTabRef()?this.tabs.length-1:this._getCurrentTabRef()-1},s.prototype._getCurrentTabRef=function(){for(var t=0;t<this.tabs.length;t++)if(this.tabs[t].active)return t;return-1},s.prototype._equaliseHeights=function(){var e=0;t.each(t.map(this.tabs,function(t){return e=Math.max(e,t.panel.css("minHeight","").height()),t.panel}),function(){this.css("minHeight",e)})},s.prototype._isInView=function(a){var s=t(e).scrollTop(),o=s+t(e).height(),i=a.offset().top;return i+a.height()<=o&&i>=s},s.prototype.activate=function(t,e){var a=jQuery.Event("tabs-activate"),s=this._getTab(t);s.disabled||this._openTab(a,s,!0,e||!0)},s.prototype.deactivate=function(t){var e=jQuery.Event("tabs-dectivate"),a=this._getTab(t);a.disabled||this._closeTab(e,a)},s.prototype.enable=function(t){var e=this._getTab(t);e&&(e.disabled=!1,e.tab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled),e.accordionTab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled))},s.prototype.disable=function(t){var e=this._getTab(t);e&&(e.disabled=!0,e.tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled),e.accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled))},s.prototype.getState=function(){return this.state},s.prototype.startRotation=function(e){var a=this;if(!(this.tabs.length>this.options.disabled.length))throw new Error("Rotation is not possible if all tabs are disabled");this.rotateInterval=setInterval(function(){var t=jQuery.Event("rotate");a._openTab(t,a._getTab(a._getNextTabRef()),!0)},e||(t.isNumeric(a.options.rotate)?a.options.rotate:4e3))},s.prototype.stopRotation=function(){e.clearInterval(this.rotateInterval),this.rotateInterval=0},s.prototype.option=function(t,e){return e&&(this.options[t]=e),this.options[t]},t.fn.responsiveTabs=function(e){var a,o=arguments;return void 0===e||"object"==typeof e?this.each(function(){t.data(this,"responsivetabs")||t.data(this,"responsivetabs",new s(this,e))}):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(a=t.data(this[0],"responsivetabs"),"destroy"===e&&t.data(this,"responsivetabs",null),a instanceof s&&"function"==typeof a[e]?a[e].apply(a,Array.prototype.slice.call(o,1)):this):void 0}}(jQuery,window),function(t){"use strict";function e(t){return null!==t&&t===t.window}function a(t){return e(t)?t:9===t.nodeType&&t.defaultView}function s(t){var e,s,o={top:0,left:0},i=t&&t.ownerDocument;return e=i.documentElement,void 0!==t.getBoundingClientRect&&(o=t.getBoundingClientRect()),s=a(i),{top:o.top+s.pageYOffset-e.clientTop,left:o.left+s.pageXOffset-e.clientLeft}}function o(t){var e="";for(var a in t)t.hasOwnProperty(a)&&(e+=a+":"+t[a]+";");return e}function i(t){if(!1===d.allowEvent(t))return null;for(var e=null,a=t.target||t.srcElement;null!==a.parentNode;){if(!(a instanceof SVGElement)&&-1!==a.className.indexOf("waves-effect")){e=a;break}a=a.parentNode}return e}function n(e){var a=i(e);null!==a&&(c.show(e,a),"ontouchstart"in t&&(a.addEventListener("touchend",c.hide,!1),a.addEventListener("touchcancel",c.hide,!1)),a.addEventListener("mouseup",c.hide,!1),a.addEventListener("mouseleave",c.hide,!1),a.addEventListener("dragend",c.hide,!1))}var r=r||{},l=document.querySelectorAll.bind(document),c={duration:750,show:function(t,e){if(2===t.button)return!1;var a=e||this,i=document.createElement("div");i.className="waves-ripple",a.appendChild(i);var n=s(a),r=t.pageY-n.top,l=t.pageX-n.left,d="scale("+a.clientWidth/100*10+")";"touches"in t&&(r=t.touches[0].pageY-n.top,l=t.touches[0].pageX-n.left),i.setAttribute("data-hold",Date.now()),i.setAttribute("data-scale",d),i.setAttribute("data-x",l),i.setAttribute("data-y",r);var u={top:r+"px",left:l+"px"};i.className=i.className+" waves-notransition",i.setAttribute("style",o(u)),i.className=i.className.replace("waves-notransition",""),u["-webkit-transform"]=d,u["-moz-transform"]=d,u["-ms-transform"]=d,u["-o-transform"]=d,u.transform=d,u.opacity="1",u["-webkit-transition-duration"]=c.duration+"ms",u["-moz-transition-duration"]=c.duration+"ms",u["-o-transition-duration"]=c.duration+"ms",u["transition-duration"]=c.duration+"ms",u["-webkit-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["-moz-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["-o-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",u["transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",i.setAttribute("style",o(u))},hide:function(t){d.touchup(t);var e=this,a=(e.clientWidth,null),s=e.getElementsByClassName("waves-ripple");if(!(s.length>0))return!1;var i=(a=s[s.length-1]).getAttribute("data-x"),n=a.getAttribute("data-y"),r=a.getAttribute("data-scale"),l=350-(Date.now()-Number(a.getAttribute("data-hold")));l<0&&(l=0),setTimeout(function(){var t={top:n+"px",left:i+"px",opacity:"0","-webkit-transition-duration":c.duration+"ms","-moz-transition-duration":c.duration+"ms","-o-transition-duration":c.duration+"ms","transition-duration":c.duration+"ms","-webkit-transform":r,"-moz-transform":r,"-ms-transform":r,"-o-transform":r,transform:r};a.setAttribute("style",o(t)),setTimeout(function(){try{e.removeChild(a)}catch(t){return!1}},c.duration)},l)},wrapInput:function(t){for(var e=0;e<t.length;e++){var a=t[e];if("input"===a.tagName.toLowerCase()){var s=a.parentNode;if("i"===s.tagName.toLowerCase()&&-1!==s.className.indexOf("waves-effect"))continue;var o=document.createElement("i");o.className=a.className+" waves-input-wrapper";var i=a.getAttribute("style");i||(i=""),o.setAttribute("style",i),a.className="waves-button-input",a.removeAttribute("style"),s.replaceChild(o,a),o.appendChild(a)}}}},d={touches:0,allowEvent:function(t){var e=!0;return"touchstart"===t.type?d.touches+=1:"touchend"===t.type||"touchcancel"===t.type?setTimeout(function(){d.touches>0&&(d.touches-=1)},500):"mousedown"===t.type&&d.touches>0&&(e=!1),e},touchup:function(t){d.allowEvent(t)}};r.displayEffect=function(e){"duration"in(e=e||{})&&(c.duration=e.duration),c.wrapInput(l(".waves-effect")),"ontouchstart"in t&&document.body.addEventListener("touchstart",n,!1),document.body.addEventListener("mousedown",n,!1)},r.attach=function(e){"input"===e.tagName.toLowerCase()&&(c.wrapInput([e]),e=e.parentNode),"ontouchstart"in t&&e.addEventListener("touchstart",n,!1),e.addEventListener("mousedown",n,!1)},t.Waves=r,document.addEventListener("DOMContentLoaded",function(){r.displayEffect()},!1)}(window);var menu=document.querySelector(".main-menu"),headerTopBar=document.querySelector(".header__top-bar"),forEach=function(t,e,a){if("[object Object]"===Object.prototype.toString.call(t))for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.call(a,t[s],s,t);else for(var o=0,i=t.length;i>o;o++)e.call(a,t[o],o,t)},hamburgers=document.querySelectorAll(".hamburger");hamburgers.length>0&&forEach(hamburgers,function(t){t.addEventListener("click",function(){this.classList.toggle("is-active"),menu.classList.toggle("active"),headerTopBar.classList.toggle("active")},!1)}),$(document).ready(function(){$("#timetable-navigation").responsiveTabs({rotate:!1,startCollapsed:"accordion",collapsible:"accordion",setHash:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
